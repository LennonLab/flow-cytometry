setwd("C:/Users/Megan/Github/mothur")
head(ids2.list)
setwd("C:\Users\Megan\Github\mothur")
# Read in your data generated by mothur analyis
'''{r}
tax <- read.csv(Cstat_all.final.taxonomy,sep = "\t",header=F)
seqs <- read.csv(Cstat_all.pick.fasta,header=F)
'''
info <- unname(c(Sys.info()[6],
.Platform$OS.type,
Sys.info()[1:2],
R.version.string,
.Platform$GUI,
system("git --version", intern = TRUE)))
info
info <- unname(c(Sys.info()[6],
.Platform$OS.type,
Sys.info()[1:2],
R.version.string,
.Platform$GUI,
system("git --version", intern = TRUE)))
info
Sys.info()[6]
.Platform$OS.type
Sys.info()[1:2]
R.version.string
.Platform$GUI
install.packages("installr")
require(installr)
updateR()
update.packages()
y
Sys.info()[6]
.Platform$OS.type
Sys.info()[1:2]
R.version.string
.Platform$GUI
system("git --version", intern = TRUE)
?system
info <- unname(c(Sys.info()[6],
.Platform$OS.type,
Sys.info()[1:2],
R.version.string,
.Platform$GUI,
system("git --version", intern = TRUE)))
info
getwd()
require(installr)
updateR()
s.v <-
matrix(c(74, 41, 26, 59),
nrow = 2,
dimnames = list(Treatment = c("N","P"),
mut.type = c("v", "s")))
fisher.test(s.v, alternative = "two.sided", conf.int = 0.95)
s.v
rm(list = ls())
setwd("C:/Users/Megan/GitHub/flow-cytometry")
source("http://bioconductor.org/biocLite.R")
biocLite("flowQ")
update.packages()
library(flowPeaks); library(flowCore); #library(flowStats);
library(flowClust); library(flowUtils); library(flowMeans); library(flowDensity)
library(GEOmap)
library("flowStats", lib.loc="~/R/win-library/3.2")
install.packages("proto")
install.packages("mvoutlier")
library("flowClust", lib.loc="~/R/win-library/3.2")
library("flowCore", lib.loc="~/R/win-library/3.2")
library("flowDensity", lib.loc="~/R/win-library/3.2")
library("flowMeans", lib.loc="~/R/win-library/3.2")
library("flowPeaks", lib.loc="~/R/win-library/3.2")
library("flowStats", lib.loc="~/R/win-library/3.2")
library("flowUtils", lib.loc="~/R/win-library/3.2")
library("flowViz", lib.loc="~/R/win-library/3.2")
library("GEOmap", lib.loc="~/R/win-library/3.2")
library(flowQ)
biocLite("flowQ")
f <- read.fcs("./tutorial/data/100715.fcs")
library(flowCore)
f <- read.fcs("./tutorial/data/100715.fcs")
f <- read.FCS("./tutorial/data/100715.fcs")
f
colnames(f)  # Channel labels
E <- exprs(f)
dim(E)
E[1:10,]
f@description
f@description$P9DISPLAY
f@parameters@data
f@parameters@data[1, c("minRange", "maxRange")]
library(flowViz)
plot(f,
c("FSC-A", "SSC-A"),
xlim = c(-111,200), ylim = c(),
smooth = FALSE)
plot(f,
c("FSC-A", "SSC-A"),
#xlim = c(),
yim = c(0,5000),
smooth = FALSE)
plot(f,
c("FSC-A", "SSC-A"),
#xlim = c(),
ylim = c(0,5000),
smooth = FALSE)
getwd()
fs <- read.flowSet(path = './tutorial/data', pattern = ".fcs")
sampleNames(fs)
length(fs)
fs[["041515_J_1.fcs"]]
fs[["100715.fcs"]]
fs[[1]]
nrow(fs[[1]])
fsApply(fs, nrow)
fsApply(fs, function(f) f@description$"TUBE NAME")
plot(fs,
c("FSC-A", "SSC-A"),
#xlim = c(),
#ylim = c(0,5000),
smooth = FALSE)
library(flowViz)
plot(fs,
c("FSC-A", "SSC-A"),
#xlim = c(),
#ylim = c(0,5000),
smooth = FALSE)
plot(f,
c("FSC-A", "SSC-A"),
#xlim = c(),
ylim = c(0,5000),
smooth = FALSE)
plot(fs[[1]],
c("FSC-A", "SSC-A"),
#xlim = c(),
#ylim = c(0,5000),
smooth = FALSE)
plot(fs[[2]],
c("FSC-A", "SSC-A"),
#xlim = c(),
#ylim = c(0,5000),
smooth = FALSE)
plot(fs[[3]],
c("FSC-A", "SSC-A"),
#xlim = c(),
#ylim = c(0,5000),
smooth = FALSE)
par(mfrow = c(1,3))
plot(fs[[1]],
c("FSC-A", "SSC-A"),
#xlim = c(),
#ylim = c(0,5000),
smooth = FALSE)
plot(fs[[1]],
c("FSC-A", "SSC-A"),
#xlim = c(),
ylim = c(0,5000),
smooth = FALSE)
plot(fs[[1]],
c("FSC-A", "SSC-A"),
#xlim = c(),
ylim = c(0,5000),
smooth = FALSE)
plot(fs[[1]],
c("FSC-A", "SSC-A"),
#xlim = c(),
ylim = c(0,5000),
smooth = FALSE)
plot(fs[[2]],
c("FSC-A", "SSC-A"),
#xlim = c(),
ylim = c(0,10000),
smooth = FALSE)
plot(fs[[3]],
c("FSC-A", "SSC-A"),
#xlim = c(),
ylim = c(0,10000),
smooth = FALSE)
?compensate
M <- f@description$'SPILL'
M
f.comp <- compensate(f, M)
summary(f)
summary(f.comp)
fs.comp <- fsApply(fs,function(frame){
#extract compensation matrix from keywords
comp <- keyword(frame)$`SPILL`
new_frame <- compensate(frame,comp)
new_frame
})
fs.comp
