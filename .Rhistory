setwd("C:/Users/Megan/Github/mothur")
head(ids2.list)
setwd("C:\Users\Megan\Github\mothur")
# Read in your data generated by mothur analyis
'''{r}
tax <- read.csv(Cstat_all.final.taxonomy,sep = "\t",header=F)
seqs <- read.csv(Cstat_all.pick.fasta,header=F)
'''
info <- unname(c(Sys.info()[6],
.Platform$OS.type,
Sys.info()[1:2],
R.version.string,
.Platform$GUI,
system("git --version", intern = TRUE)))
info
info <- unname(c(Sys.info()[6],
.Platform$OS.type,
Sys.info()[1:2],
R.version.string,
.Platform$GUI,
system("git --version", intern = TRUE)))
info
Sys.info()[6]
.Platform$OS.type
Sys.info()[1:2]
R.version.string
.Platform$GUI
install.packages("installr")
require(installr)
updateR()
update.packages()
y
Sys.info()[6]
.Platform$OS.type
Sys.info()[1:2]
R.version.string
.Platform$GUI
system("git --version", intern = TRUE)
?system
info <- unname(c(Sys.info()[6],
.Platform$OS.type,
Sys.info()[1:2],
R.version.string,
.Platform$GUI,
system("git --version", intern = TRUE)))
info
getwd()
require(installr)
updateR()
s.v <-
matrix(c(74, 41, 26, 59),
nrow = 2,
dimnames = list(Treatment = c("N","P"),
mut.type = c("v", "s")))
fisher.test(s.v, alternative = "two.sided", conf.int = 0.95)
s.v
install.packages("phyloseq")
rm(list = ls())
setwd("C:/Users/Megan/Github/flow-cytometry/")
# Load source code and dependances
## for installation of bioconductor packages
source("http://bioconductor.org/biocLite.R")
##
source("./bin/flowPrep.R")
##
source("./bin/support_functions.R")
# Install bioconductor packages. This process will take a bit of time, so be patient.
#biocLite(c("flowPeaks","flowCore","flowStats","flowViz",
#           "flowClust","flowQ", "flowUtils","flowMeans","flowDensity"))
#biocLite("GEOmap");biocLite("Logicle")
#biocLite("flowQ")
#biocLite("S4Vectors")
#biocLite("quantreg")
# Load bioconductor and stats packages
library(S4Vectors)
library(quantreg)
library(flowPeaks)
library(flowCore)
library(flowStats)
library(flowViz)
library(flowQ)
library(flowClust)
library(flowUtils)
library(flowMeans)
library(flowDensity)
library(GEOmap)
#library(Logicle)
packinfo <- installed.packages(fields = c("Package","Version"))
packinfo <- installed.packages(fields = c("Package","Version"))
flowcore <- packinfo["flowCore",c("Package","Version")]
flowstats <- packinfo["flowStats",c("Package","Version")]
flowviz <- packinfo["flowViz",c("Package","Version")]
flowUtils <- packinfo["flowUtils",c("Package","Version")]
flowMeans <- packinfo["flowMeans",c("Package","Version")]
flowq <- packinfo["flowQ",c("Package","Version")]
fs.controls <- read.flowSet(path = 'S:/FlowCytometry-INPonds/bch061815-controls',
pattern = ".fcs", transformation = FALSE,
#alter.names = TRUE, column.pattern = ".A")
column.pattern = "-A")
fs.controls
fs.controls <- read.flowSet(path = 'S:/FlowCytometry-INPonds/bch061815-controls',
pattern = ".fcs", transformation = FALSE,
#alter.names = TRUE, column.pattern = ".A")
column.pattern = "-A")
sampleNames(fs.controls)
length(fs.controls)
nrow(fs.controls[[1]])
fsApply(fs.controls,nrow)
fsApply(fs.controls, function(f) f@description$"TUBE NAME")
colnames(fs.controls)
fs.controls[[1]]@description$'SPILL'
fs.controls.comp <- fsApply(fs.controls,function(frame){
#extract compensation matrix from keywords
comp <- keyword(frame)$`SPILL`
new_frame <- compensate(frame,comp)
new_frame
})
fs.controls.comp
summary(fs.controls.comp)
plotDens(fs.controls.comp[[7]][1:10000,],
c("FSC PMT-A", "SSC-A"),
xlim = c(0,200000),
ylim = c(0,50000),
las =1,
main = "H/Py stained E. coli",
devn = FALSE)
live.gate <- kmeans(filterId = "live", "APC-A" = c("Live","Dead"))
actdorm.gate <- kmeansFilter("Pacific Blue-A" = c("Active","Dormant"), filterID="AD")
live.gate <- kmeans("APC-A" = c("Live","Dead"),filterId = "live")
live.gate <- kmeansFilter("APC-A" = c("Live","Dead"),filterID="live")
bead.gate <- rectangleGate(filterId = "beads", "FSC-A" = c(0,12), "Alexa-A" = c(0,12))
xyplot(`SSC-A` ~ `APC-A`, data = fs.controls.comp.tf,
filter = fs.LD,
smooth=TRUE)
fs.controls.comp.tf <- transform(fs.controls.comp,
transformList(colnames(fs.controls.comp)[4:7],
asinh))
fs.controls.comp.tf
plot(fs.controls.comp.tf[[7]])
LD.gate <- kmeansFilter("APC-A" = c("Live","Dead"), filterID="LD")
fs.LD <- filter(fs.controls.comp.tf,LD.gate)
summary(fs.LD)
summary(fs.LD, LD.gate)$true
xyplot(`SSC-A` ~ `APC-A`, data = fs.controls.comp.tf,
filter = fs.LD,
smooth=TRUE)
plotDens(fs.controls.comp[[5]],
c("APC-A", "SSC-A"),
xlab = "APC-A", ylab = "SSC-A",
cex.lab = 1.5, cex.axis = 1.15,
xlim = c(0,5000),
ylim = c(0,3000),
main = "Unstained",
devn=FALSE)
plotDens(fs.controls.comp[[3]],
c("APC-A", "SSC-A"),
xlab = "APC-A", ylab = "SSC-A",
cex.lab = 1.5, cex.axis = 1.15,
xlim = c(0,5000),
ylim = c(0,3000),
main = "LD Stained",
devn=FALSE)
plotDens(fs.controls.comp.tf[[5]],
c("APC-A", "SSC-A"),
xlab = "APC-A", ylab = "SSC-A",
cex.lab = 1.5, cex.axis = 1.15,
xlim = c(0,5000),
ylim = c(0,3000),
main = "Unstained",
devn=FALSE)
plotDens(fs.controls.comp.tf[[5]],
c("APC-A", "SSC-A"),
xlab = "APC-A", ylab = "SSC-A",
cex.lab = 1.5, cex.axis = 1.15,
xlim = c(0,500),
ylim = c(0,3000),
main = "Unstained",
devn=FALSE)
plotDens(fs.controls.comp.tf[[5]],
c("APC-A", "SSC-A"),
xlab = "APC-A", ylab = "SSC-A",
cex.lab = 1.5, cex.axis = 1.15,
#xlim = c(0,10),
#ylim = c(0,3000),
main = "Unstained",
devn=FALSE)
plotDens(fs.controls.comp.tf[[5]],
c("APC-A", "SSC-A"),
xlab = "APC-A", ylab = "SSC-A",
cex.lab = 1.5, cex.axis = 1.15,
#xlim = c(0,10),
ylim = c(0,3000),
main = "Unstained",
devn=FALSE)
plotDens(fs.controls.comp.tf[[3]],
c("APC-A", "SSC-A"),
xlab = "APC-A", ylab = "SSC-A",
cex.lab = 1.5, cex.axis = 1.15,
#xlim = c(0,5000),
ylim = c(0,3000),
main = "LD Stained",
devn=FALSE)
xyplot(`SSC-A` ~ `APC-A`, data = fs.controls.comp.tf,
filter = fs.LD,
smooth=TRUE)
xyplot(`SSC-A` ~ `APC-A`, data = fs.controls.comp.tf,
filter = live.gate,
smooth=TRUE)
?xyplot
xyplot(`SSC-A` ~ `APC-A`, data = fs.controls.comp.tf,
filter = live.gate,
smooth=TRUE, binSize = 100)
xyplot(`SSC-A` ~ `APC-A`, data = fs.controls.comp.tf,
filter = live.gate,
smooth=TRUE, binSize = 1000)
xyplot(`SSC-A` ~ `APC-A`, data = fs.controls.comp.tf,
filter = live.gate,
smooth=TRUE, outline = TRUE)
flowPlot(fs.control.comp.tf[[1]])
flowPlot(fs.control.comp.tf[[2]])
data(GvHD)
sampleNames(GvHD)
GvHD[[1]]
flowPlot(GvHD[["s5a01"]])
sampleNames(fs.controls.comp.tf)
flowPlot(fs.control.comp.tf[["061815_Ecoli_beads.fcs"]])
flowPlot(transform("SSC-H"=asinh,"FSC-H"=asinh) %on% GvHD[["s5a01"]])
plotDens(fs.controls.comp.tf[[2]],
c("Pacific Blue-A", "PI (B)-A"),
#xlim = c(0,15000),
#ylim = c(0,3000),
main = "H/PY",
devn=FALSE)
GvHD[["s5a01"]]
flowPlot(GvHD[["s5a01"]])
flowPlot(fs.control.comp.tf[["061815_Ecoli_beads.fcs"]],
plotParameters = c("FSC-A","SSC-A"))
fs.control.comp.tf[["061815_Ecoli_beads.fcs"]]
fs.control.comp.tf
flowPlot(fs.controls.comp.tf[["061815_Ecoli_beads.fcs"]],
plotParameters = c("FSC-A","SSC-A"))
flowPlot(fs.controls.comp.tf[["061815_Ecoli_beads.fcs"]],
plotParameters = c("APC-A","SSC-A"))
flowPlot(fs.controls.comp.tf[["061815_Ecoli_beads.fcs"]],
plotParameters = c("APC-A","SSC-A"),
filter=live.gate,
showFilter=TRUE)
flowPlot(fs.controls.comp.tf[["061815_Ecoli_beads.fcs"]],
plotParameters = c("APC-A","SSC-A"),
filter=live.gate,
showFilter=TRUE,logy=TRUE)
flowPlot(fs.controls.comp.tf[["061815_Ecoli_beads.fcs"]],
plotParameters = c("APC-A","SSC-A"),
filter=actdorm.gate,
showFilter=TRUE,logy=TRUE)
flowPlot(fs.controls.comp.tf[["061815_Ecoli_beads.fcs"]],
plotParameters = c("APC-A","SSC-A"),
filter=bead.gate,
showFilter=TRUE,logy=TRUE)
?kmeansFilter
flowPlot(fs.controls.comp.tf[["061815_Ecoli_beads.fcs"]],
plotParameters = c("APC-A","SSC-A"),
filter=bead.gate,
showFilter=TRUE,logy=TRUE, gate.border="red")
colnames(fs.controls.comp.tf)
flowPlot(fs.controls.comp.tf[["061815_Ecoli_beads.fcs"]],
plotParameters = c("FSC-A","Alexa Fluor 488-A"),
filter=bead.gate,
showFilter=TRUE,logy=TRUE, gate.border="red")
flowPlot(fs.controls.comp.tf[["061815_Ecoli_beads.fcs"]],
plotParameters = c("FSC-A","Alexa Fluor 488-A"),
filter=bead.gate,
showFilter=TRUE,logy=FALSE, gate.border="red")
flowPlot(fs.controls.comp.tf[["061815_Ecoli_beads.fcs"]],
plotParameters = c("APC-A","SSC-A"),
filter=bead.gate,
showFilter=TRUE,logy=TRUE, gate.border='red')
flowPlot(fs.controls.comp.tf[["061815_Ecoli_beads.fcs"]],
plotParameters = c("APC-A","SSC-A"),
filter=live.gate,
showFilter=TRUE,logy=TRUE, gate.border='red')
live.gate <- rectangleGate("APC-A" = c(-10,0), "SSC-A" = c(0,12),
filterId = "live")
flowPlot(fs.controls.comp.tf[["061815_Ecoli_beads.fcs"]],
plotParameters = c("APC-A","SSC-A"),
filter=live.gate,
showFilter=TRUE,logy=TRUE, gate.border='red')
flowPlot(fs.controls.comp.tf[["061815_Ecoli_beads.fcs"]],
plotParameters = c("APC-A","SSC-A"),
filter=live.gate,
showFilter=TRUE,logy=FALSE, gate.border='red')
flowPlot(fs.controls.comp.tf[["061815_Ecoli_beads.fcs"]],
plotParameters = c("APC-A","SSC-A"),
filter=live.gate,
showFilter=TRUE,logy=TRUE, gate.border='red')
fs.controls.comp.tf.log <- transform(fs.controls.comp,
transformList(colnames(fs.controls.comp.tf)[4:7],
log10))
warnings()
flowPlot(fs.controls.comp.tf.log[["061815_Ecoli_beads.fcs"]],
plotParameters = c("APC-A","SSC-A"),
filter=live.gate,
showFilter=TRUE,logy=TRUE, gate.border='red')
