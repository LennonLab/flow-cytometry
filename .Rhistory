getwd()
getwd()
setwd("~/GitHub/ReservoirGradient/analyses")
file.name <- "culture.test"
control.path <- paste("./data/",file.name,"-controls/", sep = "")
control.path
batch.path <- paste("./data/",file.name,"-batch/", sep = "")
batch.path
setwd("C:/Users/Megan/Github/flow-cytometry/analyses")
env.dat <- read.csv("../data/UniLake_EnvDat.csv", header = TRUE)
pop.dat <- read.csv("../data/UniLake_PopDat.csv", header = TRUE)
head(env.dat)
head(pop.dat)
pop.dat
pop.dat <- read.csv("../../Dimensions/Aim3/DATA/FlowCytometryData/INPonds_flowdat.csv", header = TRUE)
head(pop.dat)
# Setup working environment
rm(list = ls())
setwd("C:/Users/Megan/Github/flow-cytometry/")
# Load source code and dependances
## for installation of bioconductor packages
source("http://bioconductor.org/biocLite.R")
source("./bin/flowPrep.R")
source("./bin/support_functions.R")
# Install bioconductor packages. This process will take a bit of time, so be patient.
#biocLite(c("flowPeaks","flowCore","flowStats","flowViz",
#           "flowClust","flowQ", "flowUtils","flowMeans","flowDensity"))
#biocLite("GEOmap");biocLite("Logicle")
#biocLite("flowQ")
#biocLite("S4Vectors")
#biocLite("quantreg")
# Load bioconductor and stats packages
library(S4Vectors)
library(quantreg)
library(flowPeaks)
library(flowCore)
library(flowStats)
library(flowViz)
library(flowQ)
library(flowClust)
library(flowUtils)
library(flowMeans)
library(flowDensity)
library(GEOmap)
#library(Logicle)
library(ggplot2)
#for each in list...
packinfo <- installed.packages(fields = c("Package","Version"))
packinfo <- installed.packages(fields = c("Package","Version"))
flowcore <- packinfo["flowCore",c("Package","Version")]
flowstats <- packinfo["flowStats",c("Package","Version")]
flowviz <- packinfo["flowViz",c("Package","Version")]
flowUtils <- packinfo["flowUtils",c("Package","Version")]
flowMeans <- packinfo["flowMeans",c("Package","Version")]
flowq <- packinfo["flowQ",c("Package","Version")]
library(knitr)
# Import data
## This set includes all the single color controls
## the column.pattern call imports only data that are associated with the -A columns
# If loading info from server
fs.controls <- read.flowSet(path = 'S:/FlowCytometry-INPonds/bch061815-controls',
pattern = ".fcs", transformation = FALSE,
#alter.names = TRUE, column.pattern = ".A")
column.pattern = "-A")
# If loading from harddrive
fs.controls <- read.flowSet(path = 'F:/FlowCytometry-INPonds/bch061815-controls',
pattern = ".fcs", transformation = FALSE,
#alter.names = TRUE, column.pattern = ".A")
column.pattern = "-A")
fs.controls
#kable(summary(fs.controls))
#sampleNames(fs.controls)
library(knitr)
# Import data
## This set includes all the single color controls
## the column.pattern call imports only data that are associated with the -A columns
# If loading info from server
fs.controls <- read.flowSet(path = 'S:/FlowCytometry-INPonds/bch061815-controls',
pattern = ".fcs", transformation = FALSE,
#alter.names = TRUE, column.pattern = ".A")
column.pattern = "-A")
# If loading from harddrive
fs.controls <- read.flowSet(path = 'F:/FlowCytometry-INPonds/bch061815-controls',
pattern = ".fcs", transformation = FALSE,
#alter.names = TRUE, column.pattern = ".A")
column.pattern = "-A")
fs.controls
#kable(summary(fs.controls))
#sampleNames(fs.controls)
fs.controls <- read.flowSet(path = 'S:/FlowCytometry-INPonds/bch061815-controls',
pattern = ".fcs", transformation = FALSE,
#alter.names = TRUE, column.pattern = ".A")
column.pattern = "-A")
# If loading from harddrive
fs.controls <- read.flowSet(path = 'F:/FlowCytometry-INPonds/bch061815-controls',
pattern = ".fcs", transformation = FALSE,
#alter.names = TRUE, column.pattern = ".A")
column.pattern = "-A")
fs.controls
sampleNames(fs.controls)
length(fs.controls)
nrow(fs.controls[[1]])
fsApply(fs.controls,nrow)
fsApply(fs.controls, function(f) f@description$"TUBE NAME")
colnames(fs.controls)
par(mfrow = c(2,2))
par(mar = c(5,6,4,1))
plot(fs.controls[[6]][1:10000,],
c("FSC PMT-A", "SSC-A"),
xlim = c(0,50000),
ylim = c(0,50000),
main = "unstained E. coli",
smooth = FALSE)
text(25,48000,"A", col = "black",bg = "white")
plot(fs.controls[[7]][1:10000,],
c("FSC PMT-A", "SSC-A"),
xlim = c(0,50000),
ylim = c(0,50000),
main = "Double (H/Py) stained E. coli",
smooth = FALSE)
text(25,48000,"B", col = "black",bg = "white")
par(mar = c(5,6,2,1))
plot(fs.controls[[6]],
c("Pacific Blue-A", "PI (B)-A"),
xlim = c(0,50000),
ylim = c(0,50000),
smooth = FALSE)
text(25,48000,"C", col = "black",bg = "white")
plot(fs.controls[[7]],
c("Pacific Blue-A", "PI (B)-A"),
xlim = c(0,50000),
ylim = c(0,50000),
smooth = FALSE)
text(25,48000,"D", col = "black",bg = "white")
fs.controls[[1]]@description$'SPILL'
fs.controls.comp <- fsApply(fs.controls,function(frame){
#extract compensation matrix from keywords
comp <- keyword(frame)$`SPILL`
new_frame <- compensate(frame,comp)
new_frame
})
fs.controls.comp
summary(fs.controls.comp)
# using the E.coli stained sample
samp <- fs.controls.comp[[7]]
# Channels for transformation
chnls <- colnames(fs.controls.comp)[1:7]
lgcl <- estimateLogicle(samp, channels = chnls)
after <- transform(samp, lgcl)
# plot window
#par(mfrow = c(1,2))
#plot(samp)
#plot(after)
# Apply transformation to entire control flowset
fs.trans <- lgcl %on% fs.controls.comp
#Create plots to demonstrate differences before and after transformation
par(mfrow = c(2,3))
par(mar = c(5,6,4,1))
plot(fs.controls[[6]],
c("FSC PMT-A", "SSC-A"),
xlim = c(0,50000),
ylim = c(0,50000),
smooth = FALSE)
text(25,48000,"A", col = "black",bg = "white")
plot(fs.controls.comp[[6]],
c("FSC PMT-A", "SSC-A"),
xlim = c(0,50000),
ylim = c(0,50000),
smooth = FALSE)
text(25,48000,"B", col = "black",bg = "white")
plot(fs.trans[[6]],
c("FSC PMT-A", "SSC-A"),
#     xlim = c(0,50000),
#     ylim = c(0,50000),
smooth = FALSE)
text(25,48000,"C", col = "black",bg = "white")
plot(fs.controls[[7]],
c("FSC PMT-A", "SSC-A"),
xlim = c(0,50000),
ylim = c(0,50000),
smooth = FALSE)
text(25,48000,"D", col = "black",bg = "white")
plot(fs.controls.comp[[7]],
c("FSC PMT-A", "SSC-A"),
xlim = c(0,50000),
ylim = c(0,50000),
smooth = FALSE)
text(25,48000,"E", col = "black",bg = "white")
plot(fs.trans[[7]],
c("FSC PMT-A", "SSC-A"),
#     xlim = c(0,50000),
#     ylim = c(0,50000),
smooth = FALSE)
text(25,48000,"F", col = "black",bg = "white")
par(mfrow = c(2,3))
par(mar = c(5,6,4,1))
plot(fs.controls[[6]],
c("Pacific Blue-A", "PI (B)-A"),
xlim = c(0,50000),
ylim = c(0,50000),
smooth = FALSE)
text(25,48000,"A", col = "black",bg = "white")
plot(fs.controls.comp[[6]],
c("Pacific Blue-A", "PI (B)-A"),
xlim = c(0,50000),
ylim = c(0,50000),
smooth = FALSE)
text(25,48000,"B", col = "black",bg = "white")
plot(fs.trans[[6]],
c("Pacific Blue-A", "PI (B)-A"),
#     xlim = c(0,50000),
#     ylim = c(0,50000),
smooth = FALSE)
text(25,48000,"C", col = "black",bg = "white")
plot(fs.controls[[7]],
c("Pacific Blue-A", "PI (B)-A"),
xlim = c(0,50000),
ylim = c(0,50000),
smooth = FALSE)
text(25,48000,"D", col = "black",bg = "white")
plot(fs.controls.comp[[7]],
c("Pacific Blue-A", "PI (B)-A"),
xlim = c(0,50000),
ylim = c(0,50000),
smooth = FALSE)
text(25,48000,"E", col = "black",bg = "white")
plot(fs.trans[[7]],
c("Pacific Blue-A", "PI (B)-A"),
#     xlim = c(0,50000),
#     ylim = c(0,50000),
smooth = FALSE)
text(25,48000,"F", col = "black",bg = "white")
# Beads
samp.beads <- fs.trans[[6]]
bead.chnl <- c("FSC-A","Alexa Fluor 488-A")
bead.cols <- c(1,4)
beads.plot <- plotDens(samp.beads, bead.chnl, devn = FALSE,
xlab = "FSC-A", ylab = "Alexa Fluor 488-A", las = 1)
bead.gate <- rectangleGate(filterId = "beads",
"FSC-A" = c(3.0,3.2),
"Alexa Fluor 488-A" = c(0,1.25))
# Live/Dead gating from eFluor 660 - based on negative staining
## Must use unstained control and check with stained control
control.ld <- fs.trans[[5]]
test.ld <- fs.trans[[3]]
ld.chnl <- c("APC-A","SSC-A")
ld.cols <- c(2,7)
plot.new()
plotDens(control.ld, ld.chnl, devn = FALSE,
xlab = "APC-A", ylab = "SSC-A", las = 1)
plotDens(test.ld, ld.chnl, devn = FALSE,
xlab = "APC-A", ylab = "SSC-A", las = 1)
live.gate <- rectangleGate(filterId = "live",
"APC-A" = c(0,max(ld.cols[1])),
"SSC-A" = c(1.15,4.5))
dead.gate <- rectangleGate(filterId = "dead",
"APC-A" = c(max(ld.cols[[1]]),Inf))
ld.filt <- kmeansFilter(filterID = "ldfilt", "APC-A" = c("live","dead"))
# Test output
bead.results <- filter(fs.trans, bead.gate)
live.results <- filter(fs.trans, live.gate)
dead.results <- filter(fs.trans, dead.gate)
#live.dead.results <- filter(fs.trans, ld.filt)
summary(bead.results)
summary(live.results)
summary(dead.results)
# Create table of results for each sample
## the idea here is to pull out the character values from the output and stash them
#strsplit(output, " ")
graphics.off()
beads.plot <- plotDens(samp.beads, bead.chnl, devn = FALSE,
xlab = "FSC-A", ylab = "Alexa Fluor 488-A", las = 1)
plot.new()
plotDens(control.ld, ld.chnl, devn = FALSE,
xlab = "APC-A", ylab = "SSC-A", las = 1)
plotDens(test.ld, ld.chnl, devn = FALSE,
xlab = "APC-A", ylab = "SSC-A", las = 1)
actdorm <- Subset(fs.trans, live.gate)
actdorm
sampleNames(actdorm)
summary(actdorm)
# function to create ratio for fluorescence
test <- actdorm[[7]]
# subset data fluorescence data from flowframe
DNA <- exprs(test[,"Pacific Blue-A"])
RNA <- exprs(test[,"PI (B)-A"])
# Calculate RNA/DNA ratio
RDratio <- RNA/DNA
dat <- data.frame(DNA,RNA,RDratio)
colnames(dat) <- c("DNA","RNA", "ratio")
# Calculate population densities and relative percentages
min <- 1-sd(RDratio); max <- 1+sd(RDratio)
live.pop.dens <- length(RDratio[RDratio > min])
act.pop.dens <- length(RDratio[RDratio > min & RDratio < max])
per.dorm <- (live.pop.dens - act.pop.dens)/live.pop.dens
per.act <- (act.pop.dens)/live.pop.dens
# Visualize distribution
ggplot(dat,aes(x = ratio)) + geom_density()
fs1 <- read.flowSet(path = 'F:/FlowCytometry-INPonds/bch061815-samples',
pattern = ".fcs", transformation = FALSE,
#alter.names = TRUE, column.pattern = ".A")
column.pattern = "-A")
fs1
# Batch compensation
fs1[[1]]@description$'SPILL'
fs1.comp <- fsApply(fs1,function(frame){
#extract compensation matrix from keywords
comp <- keyword(frame)$`SPILL`
new_frame <- compensate(frame,comp)
new_frame
})
# Batch transformation
fs1.trans <- lgcl %on% fs1.comp
# Rectangle gating results
bead.results <- filter(fs1.trans, bead.gate)
live.results <- filter(fs1.trans, live.gate)
dead.results <- filter(fs1.trans, dead.gate)
summary(bead.results)
summary(live.results)
summary(dead.results)
# Subset data based on live.gate
actdorm <- Subset(fs1.trans, live.gate)
sampleNames(actdorm)
# Gather results
results1 <- matrix(NA, nrow = length(sampleNames(actdorm)), ncol = 11)
results1 <- as.data.frame(results1)
colnames(results1) <- c("sample","ratio.min","ratio.max",
"live.dens","act.dens","dorm.dens",
"act.perc","dorm.perc","mean.act","median.act", "mode.act")
# later iterations will need to account for beed count by sample
bead.count <- 10000
output.loc <- "C:/Users/Megan/GitHub/Dimensions/Aim3/DATA/FlowCytometryData/output/"
for(i in 1:length(sampleNames(actdorm))){
DNA <- exprs(actdorm[[i]][,"Pacific Blue-A"])
RNA <- exprs(actdorm[[i]][,"PI (B)-A"])
RDratio <- RNA/DNA
dat <- data.frame(DNA,RNA,RDratio)
write.csv(dat, filename = paste("C:/Users/Megan/GitHub/Dimensions/Aim3/DATA/FlowCytometryData/output/",sampleNames(actdorm)[[i]],".csv", sep=""))
head(dat)
png(filename = paste("C:/Users/Megan/GitHub/Dimensions/Aim3/DATA/FlowCytometryData/output/",sampleNames(actdorm)[[i]],".png", sep=""),
width = 860, height = 480, units = "px", pointsize = 12,
bg = "white")
par(mfrow = c(1,2))
plot(DNA,RNA,
xlab = "DNA(Pacific Blue-A)", ylab = "RNA(Pyronin Y)",
#xlim = c(0,15000),
#ylim = c(0,3000),
las = 1, main = sampleNames(actdorm)[[i]])
#points(RDratio, col = "red")
abline(0, 1, col = "red", lwd = 2)
d <- density(RDratio,
adjust = 10, kernel = "gaussian",
from = -1, to = 10, n = 512)
plot(d, las = 1, main = i)
#p <- ggplot(dat,aes(x = dat[,3]), main = i) + geom_density() +
#  xlim(-1,5)
#print(p)
dev.off()
range(RDratio)
min <- 1 - sd(RDratio)
max <- 1 + sd(RDratio)
mean.rat <- mean(RDratio)
median.rat <- median(RDratio)
#mode.rat <- mode(RDratio)
#densities must be divided by bead counts (10000)[# bacteria per 10^-6 mL of sample]
live.pop.dens <- (length(RDratio[RDratio > min])/bead.count)*1000000
dorm.pop.dens <- (length(RDratio[RDratio > min & RDratio < max])/bead.count)*1000000
act.pop.dens <- (live.pop.dens-dorm.pop.dens)
per.act <- (live.pop.dens - dorm.pop.dens)/live.pop.dens
per.dorm <- (dorm.pop.dens)/live.pop.dens
results1[i,1] <- sampleNames(actdorm)[[i]]
results1[i,2] <- min
results1[i,3] <- max
results1[i,4] <- live.pop.dens
results1[i,5] <- act.pop.dens
results1[i,6] <- dorm.pop.dens
results1[i,7] <- round(per.act*100, digits = 3)
results1[i,8] <- round(per.dorm*100, digits = 3)
results1[i,9] <- mean.rat
results1[i,10] <- median.rat
results1[i,11] <- NA
}
results1
for(i in 1:length(sampleNames(actdorm))){
DNA <- exprs(actdorm[[i]][,"Pacific Blue-A"])
RNA <- exprs(actdorm[[i]][,"PI (B)-A"])
RDratio <- RNA/DNA
dat <- data.frame(DNA,RNA,RDratio)
write.csv(dat, file = paste("C:/Users/Megan/GitHub/Dimensions/Aim3/DATA/FlowCytometryData/output/",sampleNames(actdorm)[[i]],".csv", sep=""))
head(dat)
png(filename = paste("C:/Users/Megan/GitHub/Dimensions/Aim3/DATA/FlowCytometryData/output/",sampleNames(actdorm)[[i]],".png", sep=""),
width = 860, height = 480, units = "px", pointsize = 12,
bg = "white")
par(mfrow = c(1,2))
plot(DNA,RNA,
xlab = "DNA(Pacific Blue-A)", ylab = "RNA(Pyronin Y)",
#xlim = c(0,15000),
#ylim = c(0,3000),
las = 1, main = sampleNames(actdorm)[[i]])
#points(RDratio, col = "red")
abline(0, 1, col = "red", lwd = 2)
d <- density(RDratio,
adjust = 10, kernel = "gaussian",
from = -1, to = 10, n = 512)
plot(d, las = 1, main = i)
#p <- ggplot(dat,aes(x = dat[,3]), main = i) + geom_density() +
#  xlim(-1,5)
#print(p)
dev.off()
range(RDratio)
min <- 1 - sd(RDratio)
max <- 1 + sd(RDratio)
mean.rat <- mean(RDratio)
median.rat <- median(RDratio)
#mode.rat <- mode(RDratio)
#densities must be divided by bead counts (10000)[# bacteria per 10^-6 mL of sample]
live.pop.dens <- (length(RDratio[RDratio > min])/bead.count)*1000000
dorm.pop.dens <- (length(RDratio[RDratio > min & RDratio < max])/bead.count)*1000000
act.pop.dens <- (live.pop.dens-dorm.pop.dens)
per.act <- (live.pop.dens - dorm.pop.dens)/live.pop.dens
per.dorm <- (dorm.pop.dens)/live.pop.dens
results1[i,1] <- sampleNames(actdorm)[[i]]
results1[i,2] <- min
results1[i,3] <- max
results1[i,4] <- live.pop.dens
results1[i,5] <- act.pop.dens
results1[i,6] <- dorm.pop.dens
results1[i,7] <- round(per.act*100, digits = 3)
results1[i,8] <- round(per.dorm*100, digits = 3)
results1[i,9] <- mean.rat
results1[i,10] <- median.rat
results1[i,11] <- NA
}
results1
path <- "../../Dimensions/Aim3/DATA/FlowCytometryData/output/data/"
pond.id <- "061815_BCSP_015.fcs"
pop.dat <- read.csv(paste(path,pond.id,".csv", sep=""), header = TRUE)
path <- "../../Dimensions/Aim3/DATA/FlowCytometryData/output/data/"
pond.id <- "061815_BCSP_015.fcs"
paste(path,pond.id,".csv", sep="")
getwd()
path <- "../../Dimensions/Aim3/DATA/FlowCytometryData/output/data/"
pond.id <- "061815_BCSP_015.fcs"
pop.dat <- read.csv(paste(path,pond.id,".csv", sep=""), header = TRUE)
paste(path,pond.id,".csv", sep="")
read.csv("../../Dimensions/Aim3/DATA/FlowCytometryData/output/data/061815_BCSP_015.fcs.csv", header = T)
pop.dat <- read.csv("../data/061815_BCSP_015.fcs.csv", header = TRUE)
